#!/usr/bin/env bash
# sanity-venv-audit.sh — audit all Python venvs under $ROOT
set -euo pipefail
shopt -s nullglob

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"

# ───── Detect root path ─────
if [[ -d /var/www && "$(hostname)" == "wolo" ]]; then
  ROOT="/var/www"
else
  ROOT="$HOME/projects"
fi

OUTFILE="/tmp/venv-missing-$(date +%s).log"
> "$OUTFILE"

# ───── Path shortening logic ─────
shorten_path() {
  case "$1" in
    "$HOME"/*) echo "${1/#$HOME/~}" ;;
    /var/www/*) echo "${1/#\/var\/www/\/var/www}" ;;
    *) echo "$1" ;;
  esac
}

# ───── Table Settings ─────
HEADER="📊 Global Python Venv Audit — $(date '+%Y-%m-%d %H:%M')"
w1=24 w2=8 w3=15 w4=10 w5=8 w6=36 w7=16
brd=$(printf '─%.0s' {1..132})
fmt="│ %-$(($w1-1))s│ %-$(($w2-1))s│ %-$(($w3-1))s│ %-$(($w4-1))s│ %-$(($w5-1))s│ %-$(($w6-1))s│ %-${w7}s│\n"

# ───── Print Header ─────
printf "\n%s\n\n" "$HEADER"
printf "┌%s┐\n" "${brd}"
printf "$fmt" "Repo" "Version" "Type" "Freeze Age" "Health" "Python Path" "Hints"
printf "├%s┤\n" "${brd}"

# ───── Row Logic ─────
for dir in "$ROOT"/*/; do
  repo=${dir%/}; repo=${repo##*/}

  [[ "$repo" == "venv-logs" ]] && continue
  cd "$dir" || continue

  # ───── Skip if no .py files and no Python metadata ─────
  if ! find . -maxdepth 1 -name '*.py' -o -name 'requirements.txt' -o -name '.python-version' | grep -q .; then
    continue
  fi

  PYBIN="" VERSION="—" VTYPE="—" FAGE="—" HEALTH="❌"
  PYPATH="(not found)" HINTS=()

  if [[ -x .direnv/python-3.13.5/bin/python ]]; then
    PYBIN=".direnv/python-3.13.5/bin/python"; VTYPE="direnv-local"
  elif [[ -x .direnv/python-3.13/bin/python ]]; then
    PYBIN=".direnv/python-3.13/bin/python"; VTYPE="direnv-legacy"
  elif [[ -d .direnv ]]; then
    PYBIN=$(find .direnv -path '*/bin/python' -type f | head -n1)
    [[ -n $PYBIN ]] && VTYPE="direnv-unknown"
  elif [[ -f .python-version ]]; then
    env=$(<.python-version)
    PYBIN="$(pyenv root)/versions/$env/bin/python"; VTYPE="pyenv-layout"
  fi

  if [[ -x $PYBIN ]]; then
    VERSION="$("$PYBIN" -c 'import sys; print(".".join(map(str,sys.version_info[:3])))')"
    "$PYBIN" -c 'import sys' &>/dev/null && HEALTH="✅"
    PYPATH=$(shorten_path "$PYBIN")
  else
    echo "$repo" >>"$OUTFILE"
    HINTS+=("🛠 missing")
  fi

  # ───── Freeze audit ─────
  mkdir -p venv-logs
  latest_freeze=$(ls -1t venv-logs/venv-freeze-*.log 2>/dev/null | head -n1 || true)

  if [[ -n "$latest_freeze" ]]; then
    if stat -f "%m" . &>/dev/null; then
      m=$(stat -f "%m" "$latest_freeze")  # macOS
    else
      m=$(stat -c "%Y" "$latest_freeze")  # Linux
    fi
    now=$(date +%s)
    d=$(( (now - m) / 86400 ))
    FAGE="${d}d"; (( d > 0 )) && FAGE+=" 🚨"

    TMP_FREEZE=$(mktemp)
    "$PYBIN" -m pip freeze > "$TMP_FREEZE" 2>/dev/null || true
    if ! diff -q "$TMP_FREEZE" "$latest_freeze" &>/dev/null; then
      HINTS+=("🧹 drift")
    fi
    rm -f "$TMP_FREEZE"

    ln -sf "$(basename "$latest_freeze")" venv-logs/venv-freeze.log
  else
    HINTS+=("📄 no-freeze")
  fi

  # ───── Patch .envrc for clean Starship (non-destructive) ─────
  if [[ -x $PYBIN ]]; then
    ENVRC_PATH="$dir/.envrc"
    VENV_DIR="$(dirname "$(dirname "$PYBIN")")"  # strips final /bin

    STARSHIP_LINE=$(grep '^export STARSHIP_VENV=' "$ENVRC_PATH" 2>/dev/null || echo "export STARSHIP_VENV=\"$repo-313\"")

    {
      echo "# Regenerated by sanity-venv-audit.sh"
      echo "export VENV_DIR=\"$VENV_DIR\""
      echo "export VIRTUAL_ENV=\"\$VENV_DIR\""
      echo "source \"\$VENV_DIR/bin/activate\""
      echo "export PATH=\"\$VENV_DIR/bin:\$PATH\""
      echo "$STARSHIP_LINE"
      echo 'export VIRTUAL_ENV_PROMPT="$STARSHIP_VENV"'
    } > "$ENVRC_PATH"
  fi

  HINT_TXT=$(printf "%-${w7}s" "${HINTS[*]:-}")
  printf "$fmt" "$repo" "$VERSION" "$VTYPE" "$FAGE" "$HEALTH" "$PYPATH" "$HINT_TXT"
done

# ───── Footer ─────
printf "└%s┘\n" "${brd}"
cp "$OUTFILE" "/tmp/venv-last-successful.log"
echo -e "\n📄 Broken or missing venvs logged to: $OUTFILE"
echo "✅ Done."
