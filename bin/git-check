#!/usr/bin/env python3

import subprocess
import os
import socket

IS_VPS = socket.gethostname() == "wolo"
REMOTE = "wolo"
USER_PREFIX = "/Users/tonyblum"
PROJECTS_PATH = os.path.join(USER_PREFIX, "projects")

# Filtered list (exclude 'other' and 'side')
ALL_PROJECTS = [
    "aoe2hd-frontend", "api-staging", "app-staging", "llama-api", "llama-scripts", "token_tap_app",
    "aoe2hd-parsing", "explorer-backup", "llama-backend", "wolo-backup",
    "api-backup", "app-backup", "explorer-prod", "llama-chat-api", "redline_legal_api", "wolo-prod",
    "api-prod", "app-prod", "explorer-staging", "llama-chat-app", "redline_legal_app", "wolo-staging",
    "api-prodf", "app-prodf", "explorerdev", "llama-dashboard", "wolochain",
    "api-prodn", "app-prodn", "llama", "llama-frontend", "token_tap_api", "wolodev"
]

def display_path(path):
    return path.replace(f"{USER_PREFIX}/", "") if path.startswith(USER_PREFIX) else path

def check_status(repo_path):
    if not os.path.exists(repo_path):
        return f"{display_path(repo_path)} ‚ùå Not found"
    if not os.path.isdir(os.path.join(repo_path, ".git")):
        return f"{display_path(repo_path)} üö´ Not a git repo"
    try:
        os.chdir(repo_path)
        branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], text=True).strip()
        status = subprocess.check_output(["git", "status", "--short"], text=True).strip()
        try:
            remote_diff = subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{branch}...origin/{branch}"],
                text=True,
                stderr=subprocess.DEVNULL
            ).strip()
            ahead, behind = map(int, remote_diff.split())
        except subprocess.CalledProcessError:
            ahead, behind = "?", "?"
        dirty = "Yes" if status else "No"
        return f"{display_path(repo_path)} [{branch}] ‚úÖ Ahead: {ahead}, Behind: {behind}, Dirty: {dirty}"
    except Exception as e:
        return f"{display_path(repo_path)} ‚ùå Error: {e}"

def main():
    if IS_VPS:
        print(f"\nüîç VPS REPOS")
        for name in ALL_PROJECTS:
            print(" ‚Ä¢", check_status(f"/var/www/{name}"))
    else:
        print(f"\nüîç LOCAL REPOS")
        for name in ALL_PROJECTS:
            print(" ‚Ä¢", check_status(os.path.join(PROJECTS_PATH, name)))

if __name__ == "__main__":
    main()
