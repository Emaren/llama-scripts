#!/usr/bin/env python3

import os, subprocess, socket
from collections import defaultdict

USER_PREFIX = "/Users/tonyblum"
PROJECTS_PATH = os.path.join(USER_PREFIX, "projects")
IS_VPS = socket.gethostname() == "wolo"

ALL_PROJECTS = [
    "aoe2hd-frontend", "api-staging", "app-staging", "llama-api", "llama-scripts", "token-tap-app",
    "aoe2hd-parsing", "explorer-backup", "llama-backend", "wolo-backup",
    "api-backup", "app-backup", "explorer-prod", "llama-chat-api", "redline_legal_api", "wolo-prod",
    "api-prod", "app-prod", "explorer-staging", "llama-chat-app", "redline_legal_app", "wolo-staging",
    "api-prodf", "app_prodf", "explorerdev", "llama-dashboard", "wolochain",
    "api-prodn", "app-prodn", "llama", "llama-frontend", "token-tap-api", "wolodev"
]

def display_path(path):
    return path.replace(f"{USER_PREFIX}/", "") if path.startswith(USER_PREFIX) else path

def check_status(repo_path):
    if not os.path.exists(repo_path):
        return f"{display_path(repo_path)} ‚ùå Not found"
    if not os.path.isdir(os.path.join(repo_path, ".git")):
        return f"{display_path(repo_path)} üö´ Not a git repo"
    try:
        os.chdir(repo_path)
        branch = subprocess.check_output(["git", "branch", "--show-current"], text=True).strip()
        status = subprocess.check_output(["git", "status", "--short"], text=True).strip()
        dirty = bool(status)
        try:
            remote_diff = subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{branch}...origin/{branch}"],
                text=True,
                stderr=subprocess.DEVNULL
            ).strip()
            ahead, behind = map(int, remote_diff.split())
        except subprocess.CalledProcessError:
            return f"{display_path(repo_path)} [{branch}] ‚ùå Unable to compare with origin"
        summary = f"Ahead: {ahead}, Behind: {behind}, Dirty: {'Yes' if dirty else 'No'}"
        icon = "‚úÖ" if ahead == 0 and behind == 0 and not dirty else "üü°"
        return f"{display_path(repo_path)} [{branch}] {icon} {summary}"
    except Exception as e:
        return f"{display_path(repo_path)} ‚ùå Error: {e}"

def group_and_sort_paths(path_list):
    custom_groups = {
        "redline_legal_api": "redline",
        "redline_legal_app": "redline",
        "token-tap-api": "tokentap",
        "token-tap-app": "tokentap",
    }

    grouped = defaultdict(list)
    for path in path_list:
        name = os.path.basename(path)
        group = custom_groups.get(name, name.split("-")[0])
        grouped[group].append((name, path))
    return dict(sorted(grouped.items()))

def main():
    print(f"\nüîç {'VPS' if IS_VPS else 'LOCAL'} REPOS")
    base_path = "/var/www" if IS_VPS else PROJECTS_PATH
    all_paths = [os.path.join(base_path, name) for name in ALL_PROJECTS]

    grouped = group_and_sort_paths(all_paths)
    for group, paths in grouped.items():
        print(f"\nüìÅ Group: {group}")
        for _, path in sorted(paths):
            print(" ‚Ä¢", check_status(path))

if __name__ == "__main__":
    main()
