#!/usr/bin/env bash
set -euo pipefail

# ──────────────────────────────────────────────────────────────
# 💡 Usage: direnv-bootstrap.sh [PROJECT_DIR]
# Bootstraps a .direnv/python-<VERSION> venv and matching .envrc
# ──────────────────────────────────────────────────────────────

PROJECT_DIR="${1:-$(pwd)}"
PYTHON_VERSION="3.13"
# Prefer python3.13 if present, otherwise fall back to python3
PYTHON_BIN="$(command -v python${PYTHON_VERSION} || command -v python3 || true)"

if [[ -z "$PYTHON_BIN" || ! -x "$PYTHON_BIN" ]]; then
  echo "❌ Python $PYTHON_VERSION not found. Install via: brew install python@$PYTHON_VERSION"
  exit 1
fi

cd "$PROJECT_DIR"
echo "🔧 Bootstrapping direnv in $PROJECT_DIR …"

VENV_DIR=".direnv/python-$PYTHON_VERSION"

# 1) Write .envrc to source the venv directly
cat > .envrc <<EOF
# Generated by direnv-bootstrap.sh
export VIRTUAL_ENV="\$PWD/$VENV_DIR"
export PATH="\$VIRTUAL_ENV/bin:\$PATH"
source "\$VIRTUAL_ENV/bin/activate"
EOF

# Allow direnv to pick up the new .envrc
direnv allow >/dev/null

# 2) Create the venv if it's not already there
if [[ ! -d "$VENV_DIR" ]]; then
  echo "🐍 Creating venv at $VENV_DIR …"
  "$PYTHON_BIN" -m venv "$VENV_DIR"
else
  echo "✅ Venv already exists at $VENV_DIR"
fi

# 3) Ensure we ignore env files in Git
touch .gitignore
grep -qxF '.envrc' .gitignore  || echo '.envrc'  >> .gitignore
grep -qxF '.direnv/' .gitignore || echo '.direnv/' >> .gitignore

# 4) Activate and upgrade pip
#    (direnv will auto-activate in future shells)
source "$VENV_DIR/bin/activate"
echo "🚀 Upgrading pip …"
pip install --upgrade pip

echo "✅ Done! Active Python → $(which python)"
