#!/usr/bin/env bash
# direnv-bootstrap.sh — Elite per-project venv setup
# ─────────────────────────────────────────────────────
# Usage: ./direnv-bootstrap.sh [project_dir] [--rebuild]

set -euo pipefail

START=$(date +%s)

PROJECT_DIR="${1:-$(pwd)}"
REBUILD="${2:-}"
PYTHON_VERSION="3.13.5"
PYTHON_FULL_VERSION="3.13.5"
VENV_DIR=".direnv/python-$PYTHON_VERSION"
LOGFILE="$HOME/.venv-bootstrap.log"

cd "$PROJECT_DIR"
PROJECT_NAME="$(basename "$PWD")"
PYTHON_BIN="$(command -v python$PYTHON_VERSION || command -v python3 || true)"

echo -e "\n🔧 Bootstrapping \033[1m$PROJECT_NAME\033[0m in \033[2m$PROJECT_DIR\033[0m"
echo "────────────────────────────────────────────────────────────"

# 🚫 Active venv warning
if [[ -n "${VIRTUAL_ENV:-}" ]]; then
  echo "⚠️ Active venv detected: $VIRTUAL_ENV — consider deactivating first."
fi

# 🔍 Python Check
if [[ -z "$PYTHON_BIN" || ! -x "$PYTHON_BIN" ]]; then
  echo "❌ Python $PYTHON_VERSION not found. Try: brew install python@$PYTHON_VERSION"
  exit 1
fi
echo "🧠 Using Python → $PYTHON_BIN"

# 🔁 Optional Rebuild Logic
if [[ "$REBUILD" == "--rebuild" && -d "$VENV_DIR" ]]; then
  echo "🧹 Removing old venv → $VENV_DIR"
  rm -rf "$VENV_DIR"
elif [[ ! -d "$VENV_DIR" ]]; then
  echo "ℹ️  No venv found — will create a new one"
else
  echo "ℹ️  Skipping rebuild: venv already exists and no --rebuild flag"
fi

# 📝 .envrc Setup
cat > .envrc <<EOF
# Generated by direnv-bootstrap.sh
export VIRTUAL_ENV="\$PWD/$VENV_DIR"
export PATH="\$VIRTUAL_ENV/bin:\$PATH"
source "\$VIRTUAL_ENV/bin/activate"
EOF
echo "📄 Wrote .envrc → $VENV_DIR"

# 📝 .python-version
echo "$PYTHON_FULL_VERSION" > .python-version
echo "📌 Pinned .python-version → $PYTHON_FULL_VERSION"

# 🛑 .gitignore hygiene
touch .gitignore
ADDED_ENTRIES=()
for LINE in '.envrc' '.direnv/' '.python-version'; do
  if ! grep -qxF "$LINE" .gitignore; then
    echo "$LINE" >> .gitignore
    ADDED_ENTRIES+=("$LINE")
  fi
done
if [[ ${#ADDED_ENTRIES[@]} -gt 0 ]]; then
  echo "📘 Added to .gitignore: ${ADDED_ENTRIES[*]}"
else
  echo "📘 .gitignore already contains required entries"
fi

# 🔐 Secrets check
[[ -f .env ]] && echo "🔐 .env detected (you may want to verify secrets are excluded)"
[[ -f secrets.env ]] && echo "🔐 secrets.env detected (you may want to verify secrets are excluded)"

# ✅ direnv allow
direnv allow >/dev/null
echo "✅ direnv allowed"

# 🐍 Create Venv
if [[ ! -d "$VENV_DIR" ]]; then
  echo "🐍 Creating venv → $VENV_DIR"
  "$PYTHON_BIN" -m venv "$VENV_DIR"
else
  echo "✅ Venv already exists → $VENV_DIR"
fi

# ⏳ Freshness Check
if [[ -f requirements.txt && "$VENV_DIR" -ot requirements.txt ]]; then
  echo -e "⚠️  \033[33mStale venv: requirements.txt is newer than $VENV_DIR\033[0m"
else
  echo "✅ Venv is up to date with requirements.txt"
fi

# 🚀 Activate + Upgrade Pip
source "$VENV_DIR/bin/activate"
echo "🚀 Upgrading pip …"
pip install --upgrade pip >/dev/null 2>&1 && echo "✅ pip upgraded"

# 📦 Freeze snapshot
FREEZE_LOG="venv-freeze-$(date +%Y%m%d-%H%M).log"
pip freeze > "$FREEZE_LOG"
echo "📦 Saved pip freeze → $FREEZE_LOG"
echo "📄 Top of freeze:"
head -n 5 "$FREEZE_LOG" | sed 's/^/   · /'

# 🔁 Freeze diff
if [[ -f "$FREEZE_LOG.prev" ]]; then
  echo "🧬 Changes since last freeze:"
  diff "$FREEZE_LOG.prev" "$FREEZE_LOG" | grep '^[<>]' || echo "No diff."
fi
cp "$FREEZE_LOG" "$FREEZE_LOG.prev"

# 🧪 Smoke Test
echo "🧪 Running Python health test …"
if python -c 'print("✅ Python is working")'; then
  echo "🧪 Test passed"
else
  echo "❌ Python test failed"
fi

# 🧠 Log to ~/.venv-bootstrap.log
{
  echo -e "\n▶ $(date '+%F %T') — Bootstrapped $PROJECT_NAME"
  echo "   • Python:  $(python --version)"
  echo "   • Venv:    $VENV_DIR"
  echo "   • Path:    $(which python)"
  echo "   • Freeze:  $FREEZE_LOG"
} >> "$LOGFILE"

# 📊 Final Summary
echo -e "\n📊 \033[1mBootstrap Summary\033[0m"
echo "────────────────────────────────────────────────────────────"
printf "Project     │ %-20s\n" "$PROJECT_NAME"
printf "Python      │ %-20s\n" "$(python --version | cut -d' ' -f2)"
printf "Venv Path   │ %-20s\n" "$VENV_DIR"
printf "Python Path │ %-20s\n" "$(which python)"
printf "Freeze File │ %-20s\n" "$FREEZE_LOG"
END=$(date +%s)
echo "⏱ Total time: $((END - START))s"
echo "✅ Done"
